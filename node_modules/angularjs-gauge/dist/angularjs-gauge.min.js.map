{"version":3,"sources":["angularjs-gauge.min.js"],"names":["angular","gaugeMeterProviderFn","defaultOptions","size","value","undefined","min","max","cap","thick","type","foregroundColor","backgroundColor","duration","this","setOptions","customOptions","isObject","Error","merge","ngGauge","getOptions","extend","$get","gaugeMeterDirective","Gauge","element","options","find","text","legend","unit","context","getContext","init","prototype","setupStyles","create","canvas","width","height","lineCap","lineWidth","lfs","llh","css","display","fontWeight","position","textAlign","overflow","textOverflow","fontSize","lineHeight","textDecoration","opacity","fs","lh","parseInt","animate","timestamp","Date","getTime","runtime","starttime","progress","Math","self","drawShell","head","displacement","tail","color","requestID","window","requestAnimationFrame","cancelAnimationFrame","getType","bounds","getBounds","getDuration","getMin","getMax","clamp","getValue","getForegroundColorByRange","PI","start","middle","center","getCenter","radius","getRadius","getBackgroundColor","clear","beginPath","strokeStyle","arc","x","y","stroke","clearRect","getWidth","getHeight","update","destroy","getThickness","getForegroundColor","isNumber","isNaN","parseFloat","Number","match","Object","keys","thresholds","filter","item","sort","reverse","getLineCap","restrict","replace","template","scope","append","label","prepend","link","watchData","nv","ov","gauge","isDefined","equals","watchOther","defaults","$watch","$on","module","directive","provider","$inject"],"mappings":"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","file":"angularjs-gauge.min.js","sourcesContent":["(function (angular) {\r\n    'use strict';\r\n    angular\r\n        .module('angularjs-gauge', [])\r\n        .directive('ngGauge', gaugeMeterDirective)\r\n        .provider('ngGauge', gaugeMeterProviderFn);\r\n\r\n    gaugeMeterProviderFn.$inject = [];\r\n    function gaugeMeterProviderFn() {\r\n        var defaultOptions = {\r\n            size: 200,\r\n            value: undefined,\r\n            min: 0,\r\n            max: 100,\r\n            cap: 'butt',\r\n            thick: 6,\r\n            type: 'full',\r\n            foregroundColor: 'rgba(0, 150, 136, 1)',\r\n            backgroundColor: 'rgba(0, 0, 0, 0.1)',\r\n            duration: 1500\r\n        };\r\n\r\n        this.setOptions = function (customOptions) {\r\n            if (!(customOptions && angular.isObject(customOptions)))\r\n                throw new Error('Invalid option type specified in the ngGaugeProvider');\r\n            defaultOptions = angular.merge(defaultOptions, customOptions);\r\n        };\r\n\r\n        var ngGauge = {\r\n            getOptions: function () {\r\n                return angular.extend({}, defaultOptions);\r\n            }\r\n        };\r\n\r\n        this.$get = function () {\r\n            return ngGauge;\r\n        };\r\n\r\n    }\r\n\r\n    gaugeMeterDirective.$inject = ['ngGauge'];\r\n\r\n    function gaugeMeterDirective(ngGauge) {\r\n\r\n        var tpl = '<div style=\"display:inline-block;text-align:center;position:relative;\"><span><u>{{prepend}}</u>{{value | number}}<u>{{append}}</u></span><b>{{label}}</b><canvas></canvas></div>';\r\n\r\n        var Gauge = function (element, options) {\r\n            this.element = element.find('canvas')[0];\r\n            this.text = element.find('span');\r\n            this.legend = element.find('b');\r\n            this.unit = element.find('u');\r\n            this.context = this.element.getContext('2d');\r\n            this.options = options;\r\n            this.init();\r\n        };\r\n\r\n        Gauge.prototype = {\r\n\r\n            init: function () {\r\n                this.setupStyles();\r\n                this.create();\r\n            },\r\n\r\n            setupStyles: function () {\r\n\r\n                this.context.canvas.width = this.options.size;\r\n                this.context.canvas.height = this.options.size;\r\n                this.context.lineCap = this.options.cap;\r\n                this.context.lineWidth = this.options.thick;\r\n\r\n                var lfs = this.options.size * 0.22,\r\n                    llh = this.options.size;\r\n\r\n                this.text.css({\r\n                    display: 'inline-block',\r\n                    fontWeight: 'normal',\r\n                    width: '100%',\r\n                    position: 'absolute',\r\n                    textAlign: 'center',\r\n                    overflow: 'hidden',\r\n                    textOverflow: 'ellipsis',\r\n                    fontSize: lfs + 'px',\r\n                    lineHeight: llh + 'px'\r\n                });\r\n\r\n                this.unit.css({\r\n                    textDecoration: 'none',\r\n                    fontSize: '0.6em',\r\n                    fontWeight: 200,\r\n                    opacity: 0.8\r\n                });\r\n\r\n                var fs = this.options.size / 13;\r\n                var lh = (5 * fs) + parseInt(this.options.size);\r\n\r\n                this.legend.css({\r\n                    display: 'inline-block',\r\n                    width: '100%',\r\n                    position: 'absolute',\r\n                    textAlign: 'center',\r\n                    overflow: 'hidden',\r\n                    textOverflow: 'ellipsis',\r\n                    fontWeight: 'normal',\r\n                    fontSize: fs + 'px',\r\n                    lineHeight: lh + 'px'\r\n                });\r\n            },\r\n            create: function () {\r\n\r\n                var self = this,\r\n                    type = this.getType(),\r\n                    bounds = this.getBounds(type),\r\n                    duration = this.getDuration(),\r\n                    min = this.getMin(),\r\n                    max = this.getMax(),\r\n                    value = this.clamp(this.getValue(), min, max),\r\n                    head = bounds.head,\r\n                    unit = (bounds.tail - bounds.head) / (max - min),\r\n                    displacement = unit * (value - min),\r\n                    tail = bounds.tail,\r\n                    color = this.getForegroundColorByRange(value),\r\n                    requestID,\r\n                    starttime;\r\n\r\n                function animate(timestamp) {\r\n                    timestamp = timestamp || new Date().getTime();\r\n                    var runtime = timestamp - starttime;\r\n                    var progress = runtime / duration;\r\n                    progress = Math.min(progress, 1);\r\n                    self.drawShell(head, head + displacement * progress, tail, color);\r\n                    if (runtime < duration) {\r\n                        requestID = window.requestAnimationFrame(function (timestamp) {\r\n                            animate(timestamp);\r\n                        });\r\n                    } else {\r\n                        cancelAnimationFrame(requestID);\r\n                    }\r\n                }\r\n\r\n                requestAnimationFrame(function (timestamp) {\r\n                    starttime = timestamp || new Date().getTime();\r\n                    animate(timestamp);\r\n                });\r\n\r\n            },\r\n\r\n            getBounds: function (type) {\r\n                var head, tail;\r\n                if (type == 'semi') {\r\n                    head = Math.PI;\r\n                    tail = 2 * Math.PI;\r\n                } else if (type == 'full') {\r\n                    head = 1.5 * Math.PI;\r\n                    tail = 3.5 * Math.PI;\r\n                } else if (type === 'arch') {\r\n                    head = 0.8 * Math.PI;\r\n                    tail = 2.2 * Math.PI;\r\n                }\r\n\r\n                return {\r\n                    head: head,\r\n                    tail: tail\r\n                };\r\n\r\n            },\r\n\r\n            drawShell: function (start, middle, tail, color) {\r\n                var\r\n                    context = this.context,\r\n                    center = this.getCenter(),\r\n                    radius = this.getRadius(),\r\n                    foregroundColor = color,\r\n                    backgroundColor = this.getBackgroundColor();\r\n                this.clear();\r\n\r\n                context.beginPath();\r\n                context.strokeStyle = backgroundColor;\r\n                context.arc(center.x, center.y, radius, middle, tail, false);\r\n                context.stroke();\r\n\r\n                context.beginPath();\r\n                context.strokeStyle = foregroundColor;\r\n                context.arc(center.x, center.y, radius, start, middle, false);\r\n                context.stroke();\r\n\r\n            },\r\n\r\n            clear: function () {\r\n                this.context.clearRect(0, 0, this.getWidth(), this.getHeight());\r\n            },\r\n\r\n            update: function () {\r\n                this.create();\r\n            },\r\n\r\n            destroy: function () {\r\n                this.clear();\r\n            },\r\n\r\n            getRadius: function () {\r\n                var center = this.getCenter();\r\n                return center.x - this.getThickness();\r\n            },\r\n\r\n            getCenter: function () {\r\n                var x = this.getWidth() / 2,\r\n                    y = this.getHeight() / 2;\r\n                return {\r\n                    x: x,\r\n                    y: y\r\n                };\r\n            },\r\n\r\n            getValue: function () {\r\n                return this.options.value;\r\n            },\r\n            getMin: function () {\r\n                return this.options.min;\r\n            },\r\n            getMax: function () {\r\n                return this.options.max;\r\n            },\r\n            getWidth: function () {\r\n                return this.context.canvas.width;\r\n            },\r\n\r\n            getHeight: function () {\r\n                return this.context.canvas.height;\r\n            },\r\n\r\n            getThickness: function () {\r\n                return this.options.thick;\r\n            },\r\n\r\n            getBackgroundColor: function () {\r\n                return this.options.backgroundColor;\r\n            },\r\n\r\n            getForegroundColor: function () {\r\n                return this.options.foregroundColor;\r\n            },\r\n\r\n            getForegroundColorByRange: function (value) {\r\n\r\n                var isNumber = function (value) {\r\n                    return value != undefined && !isNaN(parseFloat(value)) && !isNaN(Number(value));\r\n                };\r\n\r\n                var match = Object.keys(this.options.thresholds)\r\n                    .filter(function (item) { return isNumber(item) && Number(item) <= value })\r\n                    .sort().reverse()[0];\r\n\r\n                return match !== undefined ? this.options.thresholds[match].color || this.getForegroundColor() : this.getForegroundColor();\r\n            },\r\n\r\n            getLineCap: function () {\r\n                return this.options.cap;\r\n            },\r\n\r\n            getType: function () {\r\n                return this.options.type;\r\n            },\r\n\r\n            getDuration: function () {\r\n                return this.options.duration;\r\n            },\r\n\r\n            clamp: function (value, min, max) {\r\n                return Math.max(min, Math.min(max, value));\r\n            }\r\n\r\n        };\r\n\r\n\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            template: tpl,\r\n            scope: {\r\n                append: '@?',\r\n                backgroundColor: '@?',\r\n                cap: '@?',\r\n                foregroundColor: '@?',\r\n                label: '@?',\r\n                prepend: '@?',\r\n                size: '@?',\r\n                thick: '@?',\r\n                type: '@?',\r\n                duration: '@?',\r\n                value: '=?',\r\n                min: '=?',\r\n                max: '=?',\r\n                thresholds: '=?'\r\n\r\n            },\r\n            link: function (scope, element) {\r\n                var defaults = ngGauge.getOptions(); // fetching default settings from provider\r\n                scope.min = angular.isDefined(scope.min) ? scope.min : defaults.min;\r\n                scope.max = angular.isDefined(scope.max) ? scope.max : defaults.max;\r\n                scope.value = angular.isDefined(scope.value) ? scope.value : defaults.value;\r\n                scope.size = angular.isDefined(scope.size) ? scope.size : defaults.size;\r\n                scope.cap = angular.isDefined(scope.cap) ? scope.cap : defaults.cap;\r\n                scope.thick = angular.isDefined(scope.thick) ? scope.thick : defaults.thick;\r\n                scope.type = angular.isDefined(scope.type) ? scope.type : defaults.type;\r\n                scope.duration = angular.isDefined(scope.duration) ? scope.duration : defaults.duration;\r\n                scope.foregroundColor = angular.isDefined(scope.foregroundColor) ? scope.foregroundColor : defaults.foregroundColor;\r\n                scope.backgroundColor = angular.isDefined(scope.backgroundColor) ? scope.backgroundColor : defaults.backgroundColor;\r\n                scope.thresholds = angular.isDefined(scope.thresholds) ? scope.thresholds : {};\r\n\r\n                var gauge = new Gauge(element, scope);\r\n\r\n                scope.$watch('value', watchData, false);\r\n                scope.$watch('min', watchData, false);\r\n                scope.$watch('max', watchData, false);\r\n                scope.$watch('cap', watchOther, false);\r\n                scope.$watch('thick', watchOther, false);\r\n                scope.$watch('type', watchOther, false);\r\n                scope.$watch('size', watchOther, false);\r\n                scope.$watch('duration', watchOther, false);\r\n                scope.$watch('foregroundColor', watchOther, false);\r\n                scope.$watch('backgroundColor', watchOther, false);\r\n                scope.$watch('thresholds', watchData, false);\r\n\r\n                scope.$on('$destroy', function () { });\r\n                scope.$on('$resize', function () { });\r\n\r\n                function watchData(nv, ov) {\r\n                    if (!gauge) return;\r\n                    if (!angular.isDefined(nv) || angular.equals(nv, ov)) return;\r\n                    gauge.update();\r\n                }\r\n\r\n                function watchOther(nv, ov) {\r\n                    if (!angular.isDefined(nv) || angular.equals(nv, ov)) return;\r\n                    gauge.destroy();\r\n                    gauge.init();\r\n                }\r\n            }\r\n        };\r\n\r\n    }\r\n}(angular));\r\n"]}